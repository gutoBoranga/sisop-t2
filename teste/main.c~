#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <t2fs.h>
#include <support.h>

typedef struct t2fs_record registro_dir;

typedef struct diretorio{
    char* name;
    char* pai_pathname;
    int current_entry;
    int MTFNumber;
    int blockSize;
    int byteSize;
    FILA2 entradas;
}DIRETORIO;

FILA2 dirList;


DIRETORIO* buscaDiretorioPai(char *pathname, int pathname_len){
    DIRETORIO *paiAtual, *dirAtual;
    registro_dir *entradaAtual;
    char pathcpy[pathname_len], pathPaiAtual[pathname_len];
    char* name_token;
    int found = 0, error = 0, tokenEqualsAtual = 0;

    strcpy(pathcpy, pathname);
    name_token = strtok(pathcpy,"/");
    strcpy(pathPaiAtual, "");

    while(!found && !error){
	tokenEqualsAtual = 0;
        FirstFila2(&dirList);		
        do{
	    dirAtual = GetAtIteratorFila2(&dirList);
printf("\ntoken: %s \ndirAtual: %s \npathPaiAtual: %s \n paiDiretorio: %s",name_token,dirAtual->name,pathPaiAtual,dirAtual->pai_pathname);
            if(strcmp(name_token, dirAtual->name) == 0)
                if(strcmp(pathPaiAtual, dirAtual->pai_pathname) == 0){
                    tokenEqualsAtual = 1;
                    strcat(pathPaiAtual, name_token);
		    strcat(pathPaiAtual, "/");
                    paiAtual = dirAtual;
                }
        }while(NextFila2(&dirList) == 0 && !tokenEqualsAtual);
        /*if(dirAtual == NULL){
            FirstFila2(paiAtual->entradas);
            entradaAtual = GetAtIteratorFila2(paiAtual->entradas);
            while(entradaAtual != NULL){
                if(strcmp(name_token, entradaAtual.name) == 0){
                    strcat(pathPaiAtual, "/");
                    strcat(pathPaiAtual, name_token);
                    opendir2(pathPaiAtual);  //apenas cria uma estrutura nova se for realmente um diretório
                    tokenEqualsAtual = 1;
                }
                else
                    NextFila2(paiAtual->entradas);
            }
        }*/
        name_token = strtok(NULL, "/");
	printf("\ntokenEqualsAtual = %d",tokenEqualsAtual); 
        if(tokenEqualsAtual && name_token == NULL)
            found = 1;
        if(!tokenEqualsAtual){
            error = 1;
            paiAtual = NULL;
        }
    }
    return paiAtual;
}


int main() {
  char *pathname = "/diretorio2/diretorio3/";

    CreateFila2(&dirList);

    DIRETORIO *dir1 = malloc(sizeof(DIRETORIO));
    dir1->name = "diretorio1";
    dir1->pai_pathname = "/";
    AppendFila2(&dirList, dir1);

    DIRETORIO *dir2 = malloc(sizeof(DIRETORIO));
    dir2->name = "diretorio2";
    dir2->pai_pathname = "/";
    AppendFila2(&dirList, dir2);

    DIRETORIO *dir3 = malloc(sizeof(DIRETORIO));
    dir3->name = "diretorio3";
    dir3->pai_pathname = "/diretorio2/";
    AppendFila2(&dirList, dir3);


    DIRETORIO *paizao;
    paizao = buscaDiretorioPai(pathname, strlen(pathname));
    if(paizao != NULL){
    	printf("O nome do paizao é %s", paizao->name);
    	printf("\n Nome do pai do diretorio3 : %s", dir3->pai_pathname);
    }
    return 0;
}
